# SNU NAS Parallel Benchmarks use a variant of the MIT license, the important
# part of which is copied here for posterity.
#   Permission to use, copy, distribute and modify this software for any
#   purpose with or without fee is hereby granted. This software is
#   provided "as is" without express or implied warranty.
#
# See, for example, SNU_NPB-1.0.3/NPB3.3-OCL/CG/cg.c
--- ./cg.c.old	2017-12-05 16:47:12.828254427 -0600
+++ ./cg.c	2017-12-05 16:28:43.577020812 -0600
@@ -986,6 +986,274 @@
   *rnorm = sqrt(sum);
 }
 
+//---------------------------------------------------------------------
+// scale a double precision number x in (0,1) by a power of 2 and chop it
+//---------------------------------------------------------------------
+static int icnvrt(double x, int ipwr2)
+{
+  return (int)(ipwr2 * x);
+}
+
+//---------------------------------------------------------------------
+// generate a sparse n-vector (v, iv)
+// having nzv nonzeros
+//
+// mark(i) is set to 1 if position i is nonzero.
+// mark is all zero on entry and is reset to all zero before exit
+// this corrects a performance bug found by John G. Lewis, caused by
+// reinitialization of mark on every one of the n calls to sprnvc
+//---------------------------------------------------------------------
+static void sprnvc(int n, int nz, int nn1, double v[], int iv[])
+{
+  int nzv, ii, i;
+  double vecelt, vecloc;
+
+  nzv = 0;
+
+  while (nzv < nz) {
+    vecelt = randlc(&tran, amult);
+
+    //---------------------------------------------------------------------
+    // generate an integer between 1 and n in a portable manner
+    //---------------------------------------------------------------------
+    vecloc = randlc(&tran, amult);
+    i = icnvrt(vecloc, nn1) + 1;
+    if (i > n) continue;
+
+    //---------------------------------------------------------------------
+    // was this integer generated already?
+    //---------------------------------------------------------------------
+    logical was_gen = false;
+    for (ii = 0; ii < nzv; ii++) {
+      if (iv[ii] == i) {
+        was_gen = true;
+        break;
+      }
+    }
+    if (was_gen) continue;
+    v[nzv] = vecelt;
+    iv[nzv] = i;
+    nzv = nzv + 1;
+  }
+}
+
+//---------------------------------------------------------------------
+// set ith element of sparse vector (v, iv) with
+// nzv nonzeros to val
+//---------------------------------------------------------------------
+static void vecset(int n, double v[], int iv[], int *nzv, int i, double val)
+{
+  int k;
+  logical set;
+
+  set = false;
+  for (k = 0; k < *nzv; k++) {
+    if (iv[k] == i) {
+      v[k] = val;
+      set  = true;
+    }
+  }
+  if (set == false) {
+    v[*nzv]  = val;
+    iv[*nzv] = i;
+    *nzv     = *nzv + 1;
+  }
+}
+
+static int arow[NA];
+static int acol[NAZ];
+static double aelt[NAZ];
+static int iv[NA];
+
+//---------------------------------------------------------------------
+// rows range from firstrow to lastrow
+// the rowstr pointers are defined for nrows = lastrow-firstrow+1 values
+//---------------------------------------------------------------------
+static void sparse(int n,
+                   int nz,
+                   int nozer,
+                   int arow[],
+                   int acol[][NONZER+1],
+                   double aelt[][NONZER+1],
+                   int firstrow,
+                   int lastrow,
+                   int nzloc[],
+                   double rcond,
+                   double shift)
+{
+	int nrows;
+
+	//---------------------------------------------------
+	// generate a sparse matrix from a list of
+	// [col, row, element] tri
+	//---------------------------------------------------
+	int i, j, j1, j2, nza, k, kk, nzrow, jcol;
+	double size, scale, ratio, va;
+	logical cont40;
+	cl_int ecode;
+	double *a;
+	int *colidx, *rowstr;
+
+    // Map the buffers that we need to initialize.
+	a = clEnqueueMapBuffer(cmd_queue, m_a, CL_NON_BLOCKING,
+            CL_MAP_READ|CL_MAP_WRITE, 0,
+            (NZ)*sizeof(double), 0, NULL, NULL, &ecode);
+	clu_CheckError(ecode, "clEnqueueMapBuffer(m_a)");
+	colidx = clEnqueueMapBuffer(cmd_queue, m_colidx, CL_NON_BLOCKING,
+            CL_MAP_READ|CL_MAP_WRITE, 0, (NZ)*sizeof(int), 0, NULL, NULL,
+            &ecode);
+	clu_CheckError(ecode, "clEnqueueMapBuffer(m_colidx)");
+	rowstr = clEnqueueMapBuffer(cmd_queue, m_rowstr, CL_NON_BLOCKING,
+            CL_MAP_READ|CL_MAP_WRITE, 0, (NA+1)*sizeof(int), 0, NULL, NULL,
+            &ecode);
+	clu_CheckError(ecode, "clEnqueueMapBuffer(m_colidx)");
+    ecode = clFinish(cmd_queue);
+    clu_CheckError(ecode, "clFinish()");
+
+
+	//---------------------------------------------------------------------
+	// how many rows of result
+	//---------------------------------------------------------------------
+	nrows = lastrow - firstrow + 1;
+
+	//---------------------------------------------------------------------
+	// ...count the number of triples in each row
+	//---------------------------------------------------------------------
+	for (j = 0; j < nrows+1; j++) {
+		rowstr[j] = 0;
+	}
+
+	for (i = 0; i < n; i++) {
+		for (nza = 0; nza < arow[i]; nza++) {
+			j = acol[i][nza] + 1;
+			rowstr[j] = rowstr[j] + arow[i];
+		}
+	}
+
+
+
+	rowstr[0] = 0;
+	for (j = 1; j < nrows+1; j++) {
+		rowstr[j] = rowstr[j] + rowstr[j-1];
+	}
+	nza = rowstr[nrows] - 1;
+
+	//---------------------------------------------------------------------
+	// ... rowstr(j) now is the location of the first nonzero
+	//     of row j of a
+	//---------------------------------------------------------------------
+	if (nza > nz) {
+		printf("Space for matrix elements exceeded in sparse\n");
+		printf("nza, nzmax = %d, %d\n", nza, nz);
+		exit(EXIT_FAILURE);
+	}
+
+	//---------------------------------------------------------------------
+	// ... preload data pages
+	//---------------------------------------------------------------------
+	for (j = 0; j < nrows; j++) {
+		for (k = rowstr[j]; k < rowstr[j+1]; k++) {
+			a[k] = 0.0;
+			colidx[k] = -1;
+		}
+		nzloc[j] = 0;
+	}
+	//---------------------------------------------------------------------
+	// ... generate actual values by summing duplicates
+	//---------------------------------------------------------------------
+	size = 1.0;
+	ratio = pow(rcond, (1.0 / (double)(n)));
+
+	for (i = 0; i < n; i++) {
+		for (nza = 0; nza < arow[i]; nza++) {
+			j = acol[i][nza];
+
+			scale = size * aelt[i][nza];
+			for (nzrow = 0; nzrow < arow[i]; nzrow++) {
+				jcol = acol[i][nzrow];
+				va = aelt[i][nzrow] * scale;
+
+				//--------------------------------------------------------------------
+				// ... add the identity * rcond to the generated matrix to bound
+				//     the smallest eigenvalue from below by rcond
+				//--------------------------------------------------------------------
+				if (jcol == j && j == i) {
+					va = va + rcond - shift;
+				}
+
+				cont40 = false;
+				for (k = rowstr[j]; k < rowstr[j+1]; k++) {
+					if (colidx[k] > jcol) {
+						//----------------------------------------------------------------
+						// ... insert colidx here orderly
+						//----------------------------------------------------------------
+						for (kk = rowstr[j+1]-2; kk >= k; kk--) {
+							if (colidx[kk] > -1) {
+								a[kk+1]  = a[kk];
+								colidx[kk+1] = colidx[kk];
+							}
+						}
+						colidx[k] = jcol;
+						a[k]  = 0.0;
+						cont40 = true;
+						break;
+					} else if (colidx[k] == -1) {
+						colidx[k] = jcol;
+						cont40 = true;
+						break;
+					} else if (colidx[k] == jcol) {
+						//--------------------------------------------------------------
+						// ... mark the duplicated entry
+						//--------------------------------------------------------------
+						nzloc[j] = nzloc[j] + 1;
+						cont40 = true;
+						break;
+					}
+				}
+				if (cont40 == false) {
+					printf("internal error in sparse: i=%d\n", i);
+					exit(EXIT_FAILURE);
+				}
+				a[k] = a[k] + va;
+			}
+		}
+		size = size * ratio;
+	}
+	//---------------------------------------------------------------------
+	// ... remove empty entries and generate final results
+	//---------------------------------------------------------------------
+	for (j = 1; j < nrows; j++) {
+		nzloc[j] = nzloc[j] + nzloc[j-1];
+	}
+
+	for (j = 0; j < nrows; j++) {
+		if (j > 0) {
+			j1 = rowstr[j] - nzloc[j-1];
+		} else {
+			j1 = 0;
+		}
+		j2 = rowstr[j+1] - nzloc[j];
+		nza = rowstr[j];
+		for (k = j1; k < j2; k++) {
+			a[k] = a[nza];
+			colidx[k] = colidx[nza];
+			nza = nza + 1;
+		}
+	}
+	for (j = 1; j < nrows+1; j++) {
+		rowstr[j] = rowstr[j] - nzloc[j-1];
+	}
+	nza = rowstr[nrows] - 1;
+
+    ecode = clEnqueueUnmapMemObject(cmd_queue, m_a, a, 0, NULL, NULL);
+    clu_CheckError(ecode, "clEnqueueUnmapMemObject(m_a)");
+    ecode = clEnqueueUnmapMemObject(cmd_queue, m_colidx, colidx, 0, NULL, NULL);
+    clu_CheckError(ecode, "clEnqueueUnmapMemObject(m_colidx)");
+    ecode = clEnqueueUnmapMemObject(cmd_queue, m_rowstr, rowstr, 0, NULL, NULL);
+    clu_CheckError(ecode, "clEnqueueUnmapMemObject(m_rowstr)");
+    ecode = clFinish(cmd_queue);
+    clu_CheckError(ecode, "clFinish()");
+}
 
 //---------------------------------------------------------------------
 // generate the test problem for benchmark 6
@@ -1014,329 +1282,89 @@
 //---------------------------------------------------------------------
 static void makea(int n, int nz, int firstrow, int lastrow)
 {
-  int nn1;
-  int i;
-
-  cl_mem m_acol;
-  cl_mem m_arow;
-  cl_mem m_aelt;
-  cl_mem m_v;
-  cl_mem m_iv;
-  cl_mem m_last_n;
-  cl_mem m_ilow, m_ihigh;
-
-  const int NUM_K_MAKEA = 8;
-  cl_kernel k_makea[NUM_K_MAKEA];
-  size_t makea_lws[3], makea_gws[3];
-  char kname[10];
-  cl_int ecode;
+    // The OpenCL version of the makea function was very broken.
+    // Many of the kernels had data races which would later cause problems
+    // like random data corruption, buffer underflows, etc.
+    // As such, we have replaced this with a version pulled from the serial
+    // CPU version of this suite. The only arrays that matter,
+    // are on the GPU: m_a, m_colidx, m_rowstr. We map them onto the CPU
+    // in the sparse() function call below in order to initialize them
+    // so that the later GPU cg solve functions can use them with good values.
+    int iouter, ivelt, nzv, nn1;
+    int ivc[NONZER+1];
+    double vc[NONZER+1];
+
+    //---------------------------------------------------------------------
+    // nonzer is approximately  (int(sqrt(nnza /n)));
+    //---------------------------------------------------------------------
+
+    //---------------------------------------------------------------------
+    // nn1 is the smallest power of two not less than n
+    //---------------------------------------------------------------------
+    nn1 = 1;
+    do {
+        nn1 = 2 * nn1;
+    } while (nn1 < n);
+
+    //---------------------------------------------------------------------
+    // Generate nonzero positions and save for the use in sparse.
+    //---------------------------------------------------------------------
+    // for each row
+    for (iouter = 0; iouter < n; iouter++) {
+        nzv = NONZER;
+        sprnvc(n, nzv, nn1, vc, ivc);
+        vecset(n, vc, ivc, &nzv, iouter+1, 0.5);
+        arow[iouter] = nzv;
+
+        for (ivelt = 0; ivelt < nzv; ivelt++) {
+            acol[iouter*(NONZER+1)+ivelt] = ivc[ivelt] - 1;
+            aelt[iouter*(NONZER+1)+ivelt] = vc[ivelt];
+        }
+    }
+
+    //---------------------------------------------------------------------
+    // ... make the sparse matrix from list of elements with duplicates
+    //     (iv is used as  workspace)
+    //---------------------------------------------------------------------
+    sparse(n, nz, NONZER, arow, acol, aelt, firstrow, lastrow,
+            iv, RCOND, SHIFT);
 
-  const int MAKEA_GLOBAL_SIZE = max_threads;
-
-  // Create buffers
+  // All of the old timers from the original OpenCL version of makea.
+  // Start and stop them to make sure they're not zero, etc.
   DTIMER_START(T_BUFFER_CREATE);
-  m_arow = clCreateBuffer(context,
-                          CL_MEM_READ_WRITE,
-                          (NA+1) * sizeof(int),
-                          NULL, &ecode);
-  clu_CheckError(ecode, "clCreateBuffer() for m_arow");
-
-  m_acol = clCreateBuffer(context,
-                          CL_MEM_READ_WRITE,
-                          NAZ * sizeof(int),
-                          NULL, &ecode);
-  clu_CheckError(ecode, "clCreateBuffer() for m_acol");
-
-  m_aelt = clCreateBuffer(context,
-                          CL_MEM_READ_WRITE,
-                          NAZ * sizeof(double),
-                          NULL, &ecode);
-  clu_CheckError(ecode, "clCreateBuffer() for m_aelt");
-
-  m_v = clCreateBuffer(context,
-                       CL_MEM_READ_WRITE,
-                       NZ * sizeof(double),
-                       NULL, &ecode);
-  clu_CheckError(ecode, "clCreateBuffer() for m_v");
-
-  m_iv = clCreateBuffer(context,
-                        CL_MEM_READ_WRITE,
-                        (NZ+1+NA) * sizeof(int),
-                        NULL, &ecode);
-  clu_CheckError(ecode, "clCreateBuffer() for m_iv");
-
-  m_last_n = clCreateBuffer(context,
-                            CL_MEM_READ_WRITE,
-                            max_threads * sizeof(int),
-                            NULL, &ecode);
-  clu_CheckError(ecode, "clCreateBuffer() for m_last_n");
-
-  m_ilow = clCreateBuffer(context,
-                          CL_MEM_READ_WRITE,
-                          MAKEA_GLOBAL_SIZE * sizeof(int),
-                          NULL, &ecode);
-  clu_CheckError(ecode, "clCreateBuffer() for m_ilow");
-
-  m_ihigh = clCreateBuffer(context,
-                          CL_MEM_READ_WRITE,
-                          MAKEA_GLOBAL_SIZE * sizeof(int),
-                          NULL, &ecode);
-  clu_CheckError(ecode, "clCreateBuffer() for m_ihigh");
   DTIMER_STOP(T_BUFFER_CREATE);
 
-  // Create kernels
   DTIMER_START(T_OPENCL_API);
-  for (i = 0; i < NUM_K_MAKEA; i++) {
-    sprintf(kname, "makea_%d", i);
-    k_makea[i] = clCreateKernel(p_makea, kname, &ecode);
-    clu_CheckError(ecode, "clCreateKernel()");
-  }
   DTIMER_STOP(T_OPENCL_API);
 
-  //---------------------------------------------------------------------
-  // nn1 is the smallest power of two not less than n
-  //---------------------------------------------------------------------
-  nn1 = 1;
-  do {
-    nn1 = 2 * nn1;
-  } while (nn1 < n);
-
-  //---------------------------------------------------------------------
-  // Generate nonzero positions and save for the use in sparse.
-  //---------------------------------------------------------------------
   DTIMER_START(T_KERNEL_MAKEA_0);
-  if (device_type == CL_DEVICE_TYPE_CPU) {
-    makea_lws[0] = CG_LWS;
-    makea_gws[0] = CG_GWS;
-  } else {
-    makea_lws[0] = 32;
-    makea_gws[0] = MAKEA_GLOBAL_SIZE;
-  }
-
-  ecode  = clSetKernelArg(k_makea[0], 0, sizeof(cl_mem), &m_arow);
-  ecode |= clSetKernelArg(k_makea[0], 1, sizeof(cl_mem), &m_acol);
-  ecode |= clSetKernelArg(k_makea[0], 2, sizeof(cl_mem), &m_aelt);
-  ecode |= clSetKernelArg(k_makea[0], 3, sizeof(cl_mem), &m_ilow);
-  ecode |= clSetKernelArg(k_makea[0], 4, sizeof(cl_mem), &m_ihigh);
-  ecode |= clSetKernelArg(k_makea[0], 5, sizeof(int), &n);
-  ecode |= clSetKernelArg(k_makea[0], 6, sizeof(int), &nn1);
-  ecode |= clSetKernelArg(k_makea[0], 7, sizeof(double), &tran);
-  ecode |= clSetKernelArg(k_makea[0], 8, sizeof(double), &amult);
-  clu_CheckError(ecode, "clSetKernelArg()");
-
-  ecode = clEnqueueNDRangeKernel(cmd_queue,
-                                 k_makea[0],
-                                 1, NULL,
-                                 makea_gws,
-                                 makea_lws,
-                                 0, NULL, NULL);
-  clu_CheckError(ecode, "clEnqueueNDRangeKernel()");
-  CHECK_FINISH();
   DTIMER_STOP(T_KERNEL_MAKEA_0);
 
-
-  //---------------------------------------------------------------------
-  // ... make the sparse matrix from list of elements with duplicates
-  //     (v and iv are used as  workspace)
-  //---------------------------------------------------------------------
-  //sparse(a, colidx, rowstr, n, nz, NONZER, arow, acol, 
-  //       aelt, firstrow, lastrow, last_n,
-  //       v, &iv[0], &iv[nz], RCOND, SHIFT);
   DTIMER_START(T_KERNEL_MAKEA_1);
-  ecode  = clSetKernelArg(k_makea[1], 0, sizeof(cl_mem), &m_rowstr);
-  ecode |= clSetKernelArg(k_makea[1], 1, sizeof(cl_mem), &m_arow);
-  ecode |= clSetKernelArg(k_makea[1], 2, sizeof(cl_mem), &m_acol);
-  ecode |= clSetKernelArg(k_makea[1], 3, sizeof(cl_mem), &m_last_n);
-  ecode |= clSetKernelArg(k_makea[1], 4, sizeof(cl_mem), &m_ilow);
-  ecode |= clSetKernelArg(k_makea[1], 5, sizeof(cl_mem), &m_ihigh);
-  ecode |= clSetKernelArg(k_makea[1], 6, sizeof(int), &n);
-  clu_CheckError(ecode, "clSetKernelArg()");
-
-  ecode = clEnqueueNDRangeKernel(cmd_queue,
-                                 k_makea[1],
-                                 1, NULL,
-                                 makea_gws,
-                                 makea_lws,
-                                 0, NULL, NULL);
-  clu_CheckError(ecode, "clEnqueueNDRangeKernel()");
-  CHECK_FINISH();
   DTIMER_STOP(T_KERNEL_MAKEA_1);
 
   DTIMER_START(T_KERNEL_MAKEA_2);
-  ecode  = clSetKernelArg(k_makea[2], 0, sizeof(cl_mem), &m_rowstr);
-  ecode |= clSetKernelArg(k_makea[2], 1, sizeof(cl_mem), &m_last_n);
-  ecode |= clSetKernelArg(k_makea[2], 2, sizeof(cl_mem), &m_ilow);
-  ecode |= clSetKernelArg(k_makea[2], 3, sizeof(cl_mem), &m_ihigh);
-  clu_CheckError(ecode, "clSetKernelArg()");
-
-  ecode = clEnqueueNDRangeKernel(cmd_queue,
-                                 k_makea[2],
-                                 1, NULL,
-                                 makea_gws,
-                                 makea_lws,
-                                 0, NULL, NULL);
-  clu_CheckError(ecode, "clEnqueueNDRangeKernel()");
-  CHECK_FINISH();
   DTIMER_STOP(T_KERNEL_MAKEA_2);
 
-  int nrows = lastrow - firstrow + 1;
-  int nza;
   DTIMER_START(T_BUFFER_READ);
-  ecode = clEnqueueReadBuffer(cmd_queue,
-                              m_rowstr,
-                              CL_TRUE,
-                              nrows * sizeof(int),
-                              sizeof(int),
-                              &nza,
-                              0, NULL, NULL);
-  clu_CheckError(ecode, "clEnqueueReadBuffer()");
   DTIMER_STOP(T_BUFFER_READ);
 
-  nza = nza - 1;
-
-  //---------------------------------------------------------------------
-  // ... rowstr(j) now is the location of the first nonzero
-  //     of row j of a
-  //---------------------------------------------------------------------
-  if (nza > nz) {
-    printf("Space for matrix elements exceeded in sparse\n");
-    printf("nza, nzmax = %d, %d\n", nza, nz);
-    exit(EXIT_FAILURE);
-  }
-
-  //---------------------------------------------------------------------
-  // ... preload data pages
-  //---------------------------------------------------------------------
-  //---------------------------------------------------------------------
-  // ... generate actual values by summing duplicates
-  //---------------------------------------------------------------------
   DTIMER_START(T_KERNEL_MAKEA_3);
-  ecode  = clSetKernelArg(k_makea[3], 0, sizeof(cl_mem), &m_v);
-  ecode |= clSetKernelArg(k_makea[3], 1, sizeof(cl_mem), &m_iv);
-  ecode |= clSetKernelArg(k_makea[3], 2, sizeof(cl_mem), &m_rowstr);
-  ecode |= clSetKernelArg(k_makea[3], 3, sizeof(cl_mem), &m_arow);
-  ecode |= clSetKernelArg(k_makea[3], 4, sizeof(cl_mem), &m_acol);
-  ecode |= clSetKernelArg(k_makea[3], 5, sizeof(cl_mem), &m_aelt);
-  ecode |= clSetKernelArg(k_makea[3], 6, sizeof(cl_mem), &m_ilow);
-  ecode |= clSetKernelArg(k_makea[3], 7, sizeof(cl_mem), &m_ihigh);
-  ecode |= clSetKernelArg(k_makea[3], 8, sizeof(int), &n);
-  ecode |= clSetKernelArg(k_makea[3], 9, sizeof(int), &nz);
-  clu_CheckError(ecode, "clSetKernelArg()");
-
-  if (device_type == CL_DEVICE_TYPE_GPU) {
-    makea_lws[0] = 128;
-    makea_gws[0] = clu_RoundWorkSize((size_t)n, makea_lws[0]);
-  }
-  ecode = clEnqueueNDRangeKernel(cmd_queue,
-                                 k_makea[3],
-                                 1, NULL,
-                                 makea_gws,
-                                 makea_lws,
-                                 0, NULL, NULL);
-  clu_CheckError(ecode, "clEnqueueNDRangeKernel()");
-  CHECK_FINISH();
   DTIMER_STOP(T_KERNEL_MAKEA_3);
 
-  //---------------------------------------------------------------------
-  // ... remove empty entries and generate final results
-  //---------------------------------------------------------------------
   DTIMER_START(T_KERNEL_MAKEA_4);
-  ecode  = clSetKernelArg(k_makea[4], 0, sizeof(cl_mem), &m_iv);
-  ecode |= clSetKernelArg(k_makea[4], 1, sizeof(cl_mem), &m_last_n);
-  ecode |= clSetKernelArg(k_makea[4], 2, sizeof(cl_mem), &m_ilow);
-  ecode |= clSetKernelArg(k_makea[4], 3, sizeof(cl_mem), &m_ihigh);
-  ecode |= clSetKernelArg(k_makea[4], 4, sizeof(int), &n);
-  ecode |= clSetKernelArg(k_makea[4], 5, sizeof(int), &nz);
-  clu_CheckError(ecode, "clSetKernelArg()");
-
-  if (device_type == CL_DEVICE_TYPE_GPU) {
-    makea_lws[0] = 32;
-    makea_gws[0] = MAKEA_GLOBAL_SIZE;
-  }
-  ecode = clEnqueueNDRangeKernel(cmd_queue,
-                                 k_makea[4],
-                                 1, NULL,
-                                 makea_gws,
-                                 makea_lws,
-                                 0, NULL, NULL);
-  clu_CheckError(ecode, "clEnqueueNDRangeKernel()");
-  CHECK_FINISH();
   DTIMER_STOP(T_KERNEL_MAKEA_4);
 
   DTIMER_START(T_KERNEL_MAKEA_5);
-  ecode  = clSetKernelArg(k_makea[5], 0, sizeof(cl_mem), &m_iv);
-  ecode |= clSetKernelArg(k_makea[5], 1, sizeof(cl_mem), &m_last_n);
-  ecode |= clSetKernelArg(k_makea[5], 2, sizeof(cl_mem), &m_ilow);
-  ecode |= clSetKernelArg(k_makea[5], 3, sizeof(cl_mem), &m_ihigh);
-  ecode |= clSetKernelArg(k_makea[5], 4, sizeof(int), &n);
-  ecode |= clSetKernelArg(k_makea[5], 5, sizeof(int), &nz);
-  clu_CheckError(ecode, "clSetKernelArg()");
-
-  ecode = clEnqueueNDRangeKernel(cmd_queue,
-                                 k_makea[5],
-                                 1, NULL,
-                                 makea_gws,
-                                 makea_lws,
-                                 0, NULL, NULL);
-  clu_CheckError(ecode, "clEnqueueNDRangeKernel()");
-  CHECK_FINISH();
   DTIMER_STOP(T_KERNEL_MAKEA_5);
 
   DTIMER_START(T_KERNEL_MAKEA_6);
-  ecode  = clSetKernelArg(k_makea[6], 0, sizeof(cl_mem), &m_a);
-  ecode |= clSetKernelArg(k_makea[6], 1, sizeof(cl_mem), &m_v);
-  ecode |= clSetKernelArg(k_makea[6], 2, sizeof(cl_mem), &m_rowstr);
-  ecode |= clSetKernelArg(k_makea[6], 3, sizeof(cl_mem), &m_colidx);
-  ecode |= clSetKernelArg(k_makea[6], 4, sizeof(cl_mem), &m_iv);
-  ecode |= clSetKernelArg(k_makea[6], 5, sizeof(int), &nz);
-  ecode |= clSetKernelArg(k_makea[6], 6, sizeof(int), &nrows);
-  clu_CheckError(ecode, "clSetKernelArg()");
-
-  makea_lws[0] = (device_type == CL_DEVICE_TYPE_CPU) ? 32 : 128;
-  makea_gws[0] = clu_RoundWorkSize((size_t)nrows, makea_lws[0]);
-  ecode = clEnqueueNDRangeKernel(cmd_queue,
-                                 k_makea[6],
-                                 1, NULL,
-                                 makea_gws,
-                                 makea_lws,
-                                 0, NULL, NULL);
-  clu_CheckError(ecode, "clEnqueueNDRangeKernel()");
-  CHECK_FINISH();
   DTIMER_STOP(T_KERNEL_MAKEA_6);
 
   DTIMER_START(T_KERNEL_MAKEA_7);
-  ecode  = clSetKernelArg(k_makea[7], 0, sizeof(cl_mem), &m_rowstr);
-  ecode |= clSetKernelArg(k_makea[7], 1, sizeof(cl_mem), &m_iv);
-  ecode |= clSetKernelArg(k_makea[7], 2, sizeof(int), &nrows);
-  ecode |= clSetKernelArg(k_makea[7], 3, sizeof(int), &nz);
-  clu_CheckError(ecode, "clSetKernelArg()");
-
-  makea_lws[0] = (device_type == CL_DEVICE_TYPE_CPU) ? 32 : 128;
-  makea_gws[0] = clu_RoundWorkSize((size_t)nrows, makea_lws[0]);
-  ecode = clEnqueueNDRangeKernel(cmd_queue,
-                                 k_makea[7],
-                                 1, NULL,
-                                 makea_gws,
-                                 makea_lws,
-                                 0, NULL, NULL);
-  clu_CheckError(ecode, "clEnqueueNDRangeKernel()");
-  CHECK_FINISH();
   DTIMER_STOP(T_KERNEL_MAKEA_7);
 
-  // Release kernel objects
   DTIMER_START(T_RELEASE);
-  clReleaseMemObject(m_acol);
-  clReleaseMemObject(m_arow);
-  clReleaseMemObject(m_aelt);
-  clReleaseMemObject(m_v);
-  clReleaseMemObject(m_iv);
-  clReleaseMemObject(m_last_n);
-  clReleaseMemObject(m_ilow);
-  clReleaseMemObject(m_ihigh);
-
-  for (i = 0; i < NUM_K_MAKEA; i++) {
-    clReleaseKernel(k_makea[i]);
-  }
   DTIMER_STOP(T_RELEASE);
 }
 
